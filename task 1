#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val):data(val),next(NULL){}
};

void insertEnd(Node*& head,int val) {
    Node* newNode=new Node(val);
    if(!head) {
        head=newNode;
        return;
    }
    Node* temp=head;
    while(temp->next) {
        temp=temp->next;
    }
    temp->next=newNode;
}

Node* reverseList(Node* head) {
    Node* prev=NULL;
    Node* curr=head;
    Node* nextNode=NULL;
    while(curr) {
        nextNode=curr->next;
        curr->next=prev;
        prev=curr;
        curr=nextNode;
    }
    return prev;
}

bool isPalindrome(Node* head) {
    if(!head||!head->next) return true;
    Node* slow=head;
    Node* fast=head;
    while(fast->next&&fast->next->next) {
        slow=slow->next;
        fast=fast->next->next;
    }
    Node* secondHalf=reverseList(slow->next);
    Node* firstHalf=head;
    Node* temp=secondHalf;
    while(temp) {
        if(firstHalf->data!=temp->data) {
            return false;
        }
        firstHalf=firstHalf->next;
        temp=temp->next;
    }
    return true;
}

void display(Node* head) {
    while(head) {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}

int main() {
    Node* head=NULL;
    insertEnd(head,1);
    insertEnd(head,2);
    insertEnd(head,3);
    insertEnd(head,2);
    insertEnd(head,1);
    cout<<"Linked List: ";
    display(head);
    if(isPalindrome(head))
        cout<<"true"<<endl;
    else
        cout<<"false"<<endl;
    return 0;
}
