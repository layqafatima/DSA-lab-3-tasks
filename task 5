#include <iostream>
using namespace std;

struct SNode {
    int data;
    SNode* next;
    SNode(int val):data(val),next(NULL){}
};

struct DNode {
    int data;
    DNode* next;
    DNode* prev;
    DNode(int val):data(val),next(NULL),prev(NULL){}
};

void insertEnd(SNode*& head,int val) {
    SNode* newNode=new SNode(val);
    if(!head) {
        head=newNode;
        return;
    }
    SNode* temp=head;
    while(temp->next) temp=temp->next;
    temp->next=newNode;
}

DNode* singlyToDoubly(SNode* head) {
    if(!head) return NULL;
    DNode* dhead=new DNode(head->data);
    DNode* dcurr=dhead;
    head=head->next;
    while(head) {
        DNode* newNode=new DNode(head->data);
        dcurr->next=newNode;
        newNode->prev=dcurr;
        dcurr=newNode;
        head=head->next;
    }
    return dhead;
}

SNode* singlyToCircular(SNode* head) {
    if(!head) return NULL;
    SNode* temp=head;
    while(temp->next) temp=temp->next;
    temp->next=head; // make circular
    return head;
}

void displaySingly(SNode* head) {
    while(head) {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}

void displayDoubly(DNode* head) {
    while(head) {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}

void displayCircular(SNode* head,int n) {
    if(!head) return;
    SNode* temp=head;
    for(int i=0;i<n;i++) {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

int main() {
    SNode* shead=NULL;
    for(int i=1;i<=5;i++) insertEnd(shead,i);

    cout<<"Original Singly Linked List: ";
    displaySingly(shead);

    DNode* dhead=singlyToDoubly(shead);
    cout<<"Converted Doubly Linked List: ";
    displayDoubly(dhead);

    SNode* chead=singlyToCircular(shead);
    cout<<"Converted Circular Linked List (showing 10 elements): ";
    displayCircular(chead,10);

    return 0;
}
